{
  "hash": "2e7eaaf14c503674a40f9ce2e85a77c8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Expressões Regulares\"\ndate: \"2024-02-17\"\ncategories: [\"Tecnologia\", \"Python\"]\ndescription: Conceito e exemplo de expressões regulares.\nimage: image.jpg\n---\n\nExpressões regulares são padrões utilizados para encontrar sequências de caracteres em textos. Permitem a identificação de padrões específicos, como números de telefone, endereços de e-mail, CPFs e demais elementos\n\nAlguns conceitos importantes:\n\n[] Um conjunto de caracteres. Observação: Dentro de um conjunto, os caracteres especiais normalmente não precisam ser escapados (Exemplo: . , +, -)\n\n? Quantificador em expressões regulares que indica que o padrão que o precede é opcional, ou seja, pode ocorrer zero ou uma vez\n\n\\b denota uma fronteira de palavra, garantindo que o padrão comece e termine em uma fronteira de palavra (ou seja, não parte de um texto maior).\n\n\\d Match no qual os dígitos correspondem a numeros de 0–9\n\n[a-zA-Z] Match para qualquer caracter entre a-z (minúsculo) ou A-Z (maiúsculo)\n\nExemplo de Uso de Regex para Encontrar Endereços de E-mail:\n\n::: {#022fb304 .cell execution_count=1}\n``` {.python .cell-code}\nimport re\n\ntexto = \"joao teste1@gmail.co maria teste2@gmail.com adolfo teste3@protonmail.com\"\n\npadrao_email = r\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{3,}\"\n\nemails_encontrados = re.findall(padrao_email, texto)\n\nprint(emails_encontrados)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['teste2@gmail.com', 'teste3@protonmail.com']\n```\n:::\n:::\n\n\nNeste exemplo, utilizamos uma expressão regular para encontrar todos os endereços de e-mail em um texto.\n\nO padrão r”[A-Za-z0–9._%+-]+@[A-Za-z0–9.-]+\\.[A-Z|a-z]{3,}” é projetado para corresponder a uma ampla variedade de endereços de e-mail, incluindo domínios com três ou mais caracteres após o ponto.\n\nExemplo de Uso de Regex para Encontrar CPFs:\n\n::: {#fc7659ee .cell execution_count=2}\n``` {.python .cell-code}\nimport re\n\nlista_cpfs = [\n    \"Fjwf: 000.000.000-11\",\n    \"rfjkfrfjk 239.458.234-10\",\n    \"ejkjefke 09812345691\",\n    \"cpf invalido 984395930111\",\n]\n\npadrao_cpf = r\"\\b\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}\\b\"\n\ncpfs = []\n\nfor texto in lista_cpfs:\n    cpfs.append(re.findall(padrao_cpf, texto))\n\nprint(cpfs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[['000.000.000-11'], ['239.458.234-10'], ['09812345691'], []]\n```\n:::\n:::\n\n\nNeste exemplo, usamos uma expressão regular para encontrar CPFs em uma lista de strings.\n\nO padrão r”\\b\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}\\b” corresponde a CPFs em diferentes formatos, incluindo aqueles com ou sem pontos e hífen.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}